import React, { useState } from 'react';
import axios from 'axios';
import mainUrl from "../constants";

const AdminPanel = () => {
    const [password, setPassword] = useState('');
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [error, setError] = useState('');
    const [newWallet, setNewWallet] = useState('');
    const [selectedDate, setSelectedDate] = useState("");

    const [confirmData, setConfirmData] = useState({
        username: '',
        packageName: '',
        depositAmount: '',
        system: 'USDT TRC20'
    });
    const [deleteData, setDeleteData] = useState({
        username: '',
        packageName: ''
    });

    const correctPassword = 'wqfqwfyguhijo'; // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å

    const handleLogin = () => {
        if (password === correctPassword) {
            setIsAuthenticated(true);
            setError('');
        } else {
            setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        }
    };

    const handleConfirmInvestment = async () => {
        console.log(confirmData)
        try {
            const res = await axios.post(`${mainUrl}/api/v1/admin/confirmInvestment`, confirmData);
            alert('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } catch (err) {
            alert(`–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${err.response?.data?.message || err.message}`);
        }
    };

    const [userInvestments, setUserInvestments] = useState([]);

    const fetchUserInvestments = async () => {
        try {
            const res = await axios.get(`${mainUrl}/api/v1/admin/investments?username=${deleteData.username}`);
            setUserInvestments(res.data.data || []);
        } catch (err) {
            alert(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${err.response?.data?.message || err.message}`);
            setUserInvestments([]);
        }
    };

    const handleDeleteInvestmentById = async (id) => {
        if (!id) return alert("ID –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");

        try {
            await axios.delete(`${mainUrl}/api/v1/admin/deleteInvestment/${id}`);
            alert('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
            fetchUserInvestments();
        } catch (err) {
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${err.response?.data?.message || err.message}`);
        }
    };

    const handleWalletUpdate = async () => {
        try {
            await axios.put(`${mainUrl}/api/v1/admin/wallet-to-pay`, {
                trc20: newWallet,
            });
            alert('–ö–æ—à–µ–ª–µ–∫ TRC20 —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!');
            setNewWallet('');
        } catch (err) {
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: ${err.response?.data?.message || err.message}`);
        }
    };

    const updateInvestmentDate = async (investmentId, newDateISO) => {
        try {
            const response = await axios.patch(`${mainUrl}/api/v1/admin/investments/${investmentId}`, {
                dateOfCreation: newDateISO,
            }, {
                headers: {
                    "Content-Type": "application/json",
                    // "Authorization": `Bearer ${token}` // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                },
            });

            console.log("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", response.data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error.response?.data || error.message);
        }
    };



    if (!isAuthenticated) {
        return (
            <div style={styles.loginContainer}>
                <h2>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>
                <input
                    type="password"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    style={styles.input}
                />
                <button onClick={handleLogin} style={styles.button}>–í–æ–π—Ç–∏</button>
                {error && <p style={styles.error}>{error}</p>}
            </div>
        );
    }

    return (
        <div style={styles.panel}>
            <h2>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>

            {/* Confirm Investment */}
            <div style={styles.block}>
                <h3>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é</h3>
                <input
                    type="text"
                    placeholder="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    value={confirmData.username}
                    onChange={(e) => setConfirmData({...confirmData, username: e.target.value})}
                    style={styles.input}
                />
                <input
                    type="text"
                    placeholder="–ü–∞–∫–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)"
                    value={confirmData.packageName}
                    onChange={(e) => setConfirmData({...confirmData, packageName: e.target.value})}
                    style={styles.input}
                />
                <input
                    type="number"
                    placeholder="–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞"
                    value={confirmData.depositAmount}
                    onChange={(e) => setConfirmData({...confirmData, depositAmount: e.target.value})}
                    style={styles.input}
                />
                <select
                    value={confirmData.system}
                    onChange={(e) => setConfirmData({...confirmData, system: e.target.value})}
                    style={styles.input}
                >
                    <option>USDT TRC20</option>

                </select>
                <button onClick={handleConfirmInvestment} style={styles.button}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
            </div>

            <div style={styles.block}>
                <h3>‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é / –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–∞–∫–µ—Ç–∞</h3>
                <input
                    type="text"
                    placeholder="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    value={deleteData.username}
                    onChange={(e) => {
                        setDeleteData({...deleteData, username: e.target.value});
                        setUserInvestments([]); // –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –ª–æ–≥–∏–Ω–µ
                    }}
                    style={styles.input}
                />
                <button onClick={fetchUserInvestments} style={styles.button}>–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</button>

                {userInvestments.length > 0 ? (
                    <div style={{marginTop: 15}}>
                        <h4>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</h4>
                        <ul style={{paddingLeft: 20}}>
                            {userInvestments.map((inv) => (
                                <li key={inv._id} style={{marginBottom: 10}}>
                                    <strong>ID:</strong> {inv._id} <br/>
                                    <strong>–ü–∞–∫–µ—Ç:</strong> {inv.packageName}, <strong>–°—É–º–º–∞:</strong> {inv.depositAmount}$ <br/>

                                    <input
                                        type="datetime-local"
                                        value={selectedDate}
                                        onChange={(e) => setSelectedDate(e.target.value)}
                                        style={{marginTop: 8, marginBottom: 8}}
                                    />
                                    <br/>
                                    <button
                                        onClick={() => {
                                            if (!selectedDate) return alert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!");
                                            const isoDate = new Date(selectedDate).toISOString();
                                            updateInvestmentDate(inv._id, isoDate);
                                        }}
                                        style={{...styles.button, backgroundColor: "#10b981", marginRight: 10}}
                                    >
                                        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É
                                    </button>

                                    <button
                                        onClick={() => handleDeleteInvestmentById(inv._id)}
                                        style={{...styles.button, backgroundColor: '#dc2626'}}
                                    >
                                        –£–¥–∞–ª–∏—Ç—å
                                    </button>

                                </li>
                            ))}
                        </ul>
                    </div>
                ) : (
                    deleteData.username &&
                    <p style={{marginTop: 10, color: '#999'}}>–ù–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.</p>
                )}
            </div>

            <div style={styles.block}>
                <h3>üíº –û–±–Ω–æ–≤–∏—Ç—å TRC20 –∫–æ—à–µ–ª—ë–∫</h3>
                <input
                    type="text"
                    placeholder="–ù–æ–≤—ã–π TRC20 –∫–æ—à–µ–ª—ë–∫"
                    value={newWallet}
                    onChange={(e) => setNewWallet(e.target.value)}
                    style={styles.input}
                />
                <button onClick={handleWalletUpdate} style={styles.button}>
                    –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫
                </button>
            </div>


        </div>
    );
};

const styles = {
    loginContainer: {
        maxWidth: 400,
        margin: '100px auto',
        padding: 20,
        borderRadius: 8,
        boxShadow: '0 0 10px rgba(0,0,0,0.2)',
        backgroundColor: '#fff',
        textAlign: 'center',
    },
    panel: {
        maxWidth: 600,
        margin: '40px auto',
        padding: 20,
        backgroundColor: '#f9f9f9',
        borderRadius: 10,
        boxShadow: '0 0 15px rgba(0,0,0,0.1)',
    },
    block: {
        marginBottom: 30,
        padding: 20,
        backgroundColor: '#fff',
        borderRadius: 6,
        boxShadow: '0 0 5px rgba(0,0,0,0.05)',
    },
    input: {
        width: '100%',
        padding: 10,
        margin: '8px 0',
        borderRadius: 4,
        border: '1px solid #ccc',
    },
    button: {
        padding: '10px 20px',
        borderRadius: 4,
        border: 'none',
        backgroundColor: '#2563eb',
        color: '#fff',
        cursor: 'pointer',
        marginTop: 10,
    },
    error: {
        color: 'red',
        marginTop: 10,
    },
};

export default AdminPanel;
